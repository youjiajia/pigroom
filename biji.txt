1、序列化
from rest_framework import serializers
class SnippetSnippetSerializer(serializers.Serializer):
     pk = serializers.Intergerield(read_only=True)
     create(self,validated_data):
       """如果数据合法就创建一个"""
     update(self,instance,validated_data):
	"""如果数据合法就更新"""
	instance.title=validated_data.get('title',instance.tile)
	instance.save()
	return instance
class SnippetSerializer(serializers.ModelSerializer):
	class Meta:
		model = Snippet
		fields = ('id', 'title')
ModelSerializer比Serializer自动检测字段，简单定义了create和update方法

       
serializers.HyperlinkeddelSerilizer
HyperlinkedModelSerializer不会自动包含pk field
HyperlinkedModelSerializer会自动包括url field
关系使用的是HyperlinkedRelatedField而不是PrimaryKeyRelatedField
2、视图层
2.1
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from rest_framework.renderers import JSONRenderer
from rest_framework.parsers import JSONParser
from snippets.models import Snippet
from snippets.serializers import SnippetSerializer
class JSONResonse(HttpResponse):
	"用于返回json数据"
	def __init__(self. data. **kwargs):
		content = JSONRenderer().render(data)
		kwargs['content_type'] = 'application/json'
		super(JSONResponse.self).__init__(content.**kwargs)
@csrf_exempt
def snippet_list(request):
	"""展示所有snippets或者创建新的snippet"""
	if request.method == 'GET':
		snippets =Snippet.objects.all()
		serializer = SnippetSerializer(snippets, many=True)
		return JSONResponse(serializer.data)
	elif request.method == 'POST':
		data = JSONParser().parse(request)
		serializer =SnippetSerializer(data=data)
		if serializer.is_valid():
			serializer.save()
			return JSONResponse(serializer.data,status=200)
		return JSONRespnse(serializer.errors, status=400)
2.2
from rest_framework import status
from rest_framework.decorators import api_view
form rest_framework.response import Response
from snippets.models import Snippet
from snippets.serializers import SnippetSerializer

@api_view(['GET','POST'])
def anippet_list(request):
	if requests.method == "POST":
		serializer = SnippetSerializer(data=request.data)
		if serializer.is_valid():
			serializer.save()
			return Response(serializer.data,status=status.HTTP_201_CREATED)
		
使用request和response不用每次序列化json了
2.3类视图
from snippets.models import Snippet
from snippets.serializers import SnippetSerializer
from django.http import Http404
from rest_fromework.views import APIView
from rest_framework.response import Response
from rest_framework import status
class SnippetList(APIView):
	def get(self,request,format=None):
		snippets =Snippet.objects.all()
		serializer = SnippetSerializer(snippets,many=True)
		return Response(serializer.data)
	def post(self,request,format=None):
		serializer = SnippetSerializer(data=request.data)
		if serializer.is_valid():
			serializer.save()
			return Response(serializer.data,status=status.Http_201_CREATED)
		return Response(serializer.errors,status=status.HTTP_400_BAD_REQUEST)
清晰的分离了HTTP请求方法，坚持dry原则
2.4Mixins的使用
from snippets.models import Snippet
from snippets.serializers import SnippetSerializer
from rest_framework import mixins
from rest_framework import generics
class SnippetList(mixins.ListModelMixin,mixins.CreateModelMixin,generics.GenericAPIView):
	queryset = Snippet.objects.all()
	serializer_class = SnippetSerializer
	def get(self,request,*args,**kwargs):
		return self.list(request,*args,**kwargs)
	def post(self,request,*args,**kwargs):
		return self.create(request,*args,**kwargs)
GenericAPIView基类提供了核心功能，ListModelMixin提供了.list()行为CreateModelMixin提供了.create行为,RetrieveModelMixin提供.retrieve()行为UpdateModelMixin提供了.update()行为,DestroyModelMixin提供了.destroy()行为

2.5通用类视图
from snippets.models import Snippet
from snippets.serializers import SnippetSerializer
from rest_froamework import generics

class SnippetList(generics.ListCreateAPIView):
	queryset = Snippet.objects.all()
	serializer_class = SnippetSerializer

class SnippetDetail(generics.RetrieveUpdateDestroyAPIView):
	queryset = Snippet.objects.all()
	serializer_class =SnippetSerializer
3、权限 对象级别权限
from rest_framework import permissions
class IsOwnerOrReadOnly(permissions.BasePermission):
	"""自定义权限，只有创建者才能编辑"""
	def has_object_permission(self,request,view,obj):
		if request.method in permissions.SAFE_MEHODS:
			return True
		return obj.owner == request.user

修改SnippetDetail视图
permission_classes = (permissions.IsAuthenticatedOrReadOnly,IsOwnerOrReadOnly,)	


4、分页
setting中设置REST_FRAMEWORK = {'PAGE_SIZE':10}

5、使用viewsets和routers来基于常见的约定自动进行url配置
from rest_framework import viewsets
from rest_framework.decorators import detail_route

class UserViewSet(viewsets.ReadOnlyModelViewSet):
	queryset = User.objects.all()
	serializer_class = UserSerializer
class SnippetViewSet(viewsets.ModelViewSet):
	queryset = Snippet.objects.all()
	serializer_class = SnippetSerializer
	permission_class = (permissions.IsAuthenticatedOrReadOnly,IsOwnerOrReadOnly,)
	@detail_route(renderer_classes=[renderers.StaticHTMLRenderer])
	def highlight(self, request, *args, **kwargs):
		snippet = self.get_object()
		return Response(snippet.highlighted)
	def perform_create(self,serializer):
		serializer.save(owner=self.request.user)
@detail_route装饰的用户自定义动作默认相应get请求，如果需要响应post操作需要制定methods参数
默认情况下，自定义动作对应的url取决于他们的函数名，也可以通过给的装饰器传递url_path参数来进行修改。
5.1显式的绑定url和viewsets
from snippets.views import SnippetViewSet, UserViewSet, api_root
from rest_framework import renderers

snippet_list = SnippetViewSet.as_view({
	'get':'list',
	'post':'create'
})
snippet_detail = SnippetViewSet.as_view({
	'get':'retrieve'..
})
...
urlpatterns = fromat_suffix_patterns([
	url(r'^snippets/$', snippet_list, name='snippet-list'),
	url(r'^snippets/(?P<pk>[0-9]+)/$', snippet_detail, name='snippet-detail'),
	...
])
5.2使用Routers
from django.conf.urls import url,include
from snippets import views
from rest_framework.routers import DefaultRouter
router = DefaultRouter()
router.register(r'snippets',views.SnippetViewSet)
router.register(r'users',views.UserViewSet)
urlpatterns = [
	url(r'^', include(router.urls)),
	url(r'^api-auth/', include('rest_framework.urls', namepase='rest_framework'))
]
权衡views和viewsets
viewsets是一种很有用的抽象，它帮助我们确保url符合惯例，减少代码编写量，使你专注于api交互和设计而不是url配置上
不过viewsets相比于显示构建views，有些隐晦。
可以优化的:使用redis进行分页，使用cookie存储ut来优化登陆
